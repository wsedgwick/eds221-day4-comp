---
title: "Untitled"
format: html
editor: visual
---

## quarter splits

```{r}

library(tidyverse)

quarter_splits <- c(1.0, 1.1, 1.2, 1.1, 1.4, 1.5, 1.6, 1.5)

for(i in seq_along(quarter_splits)) {
  val <- quarter_splits[i] + quarter_splits[i + 1]
  print(val)
}

```

```{r}

animal_age <- function(animal, age) {
  if (animal == "dog") {
    print(age * 7)
  } else if (animal == "goat") {
    print(age * 4.7)
  }
}

animal_age("dog", 2.3)


```

```{r}

colors <- c("blue", "green", "red")
cars <- c("ferrari", "ford", "fiat", "audi")


fruit_out <- matrix(nrow = length(cars), ncol = length(colors))

for(i in seq_along(cars)) {
  for(j in seq_along(colors)) {
    total_cars <- paste(colors[i], cars[j])
    cars[i,j] <- total_cars
  }
}
```

# Automate estimating population size over a range of times, and at multiple growth rates

```{r}
out_matrix = matrix()

growth <- function(rate, time) {
  for(i in seq_along(rate)) {
    for(j in seq_along(time)) {
      calc_logistic (for i over all j)
      store calc_population in out_matrix
    }
  }
}

time_vec <- seq(0, 30, 0.1)

prop_35_vec <- vector(mode = "numeric", length = length(time_vec))

logistic_growth <- function(N0, K, r, time) {
  Nt <- K / (1 + ((K - N0) / N0) * exp(-r * time))
  print(Nt)
}

r_seq <- seq(from = 0.20,to = 0.40,by = 0.01)

out_matrix <- matrix(nrow = length(time_vec), ncol = length(r_seq))


for (i in 1:length(r_seq)) {
  for (j in 1:length(time_vec)) { # Inner loop is growth rates
    pop <- logistic_growth(N0 = 100, 
                           K = 6000, 
                           r = r_seq[i], 
                           time = time_vec[j])
    out_matrix[j, i] <- pop
  }
}

```

Command Option X - p



```{r}


logistic_growth <- function(K, N0, r, time) {
K / (1 + ((K - N0) / N0) * exp(- r * time))
}

logistic_growth()

```


```{r}

time_vec <- seq(from = 0, to = 35, by = 0.1)

pop_35 <- logistic_growth(N0 = 4, r = 0.8, K = 3000, time = time_vec)


pop_35_df <- data.frame(time_vec, pop_35)

ggplot(data = pop_35_df, aes(x = time_vec, y = pop_35)) +
  geom_point()


pop_35_vec <- vector(mode = "numeric", length = length(time_vec))

for(i in seq_along(time_vec)) {
  population <- logistic_growth(N0 = 100, K = 1000, r = 0.27, time = time_vec[i])
  pop_35_vec[i] < population
}

```

## Iterate over multiple growth rates

```{r}

r_seq <- seq(from = 0.2, to = 0.4, by = 0.01)

```

```{r}

out_matrix <- matrix(nrow = length(time_vec), ncol = length(r_seq))

for (i in seq_along(r_seq)) {
  for (j in seq_along(time_vec)) {
    pop <- logistic_growth(N0 = 100, K = 6000, r = r_seq[i], time = time_vec[j])
    out_matrix[j, i] <- pop
  }
}

### Now some wrangling

logistic_df <- data.frame(out_matrix, time = time_vec)

# changing column names

colnames(logistic_df) <- c(paste0("gr_", r_seq), "time")

# Don't want to repeat time, just population

logistic_df_long <- logistic_df %>%
  pivot_longer(cols = -time, values_to = "population", names_to = "growth_rate")

ggplot(data = logistic_df_long, aes(x = time, y = population)) +
  geom_line(aes(color = growth_rate))


```


Use `warning` to add a warning
Use `stop` to add an error
P=0.3\rho A v^3

  
  rho air density(kg / m ^3)
A area covered by turbine(meters)
x wind velocity(m/s)

```{r}

Air density <- function(rho, r, wind_speed) {
  (0.3 * rho * 3.14 * r ^ 2) * (wind_speed)
}

if (windspeed > 30) {
  
}

if (rho > 1.25) {
  warning("That air density is suspicious")
}

if (radius < 0) {
  stop("Rotor radius must be positive")
}

```






